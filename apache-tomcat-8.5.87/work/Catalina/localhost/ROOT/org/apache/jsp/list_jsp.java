/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.87
 * Generated at: 2023-03-25 18:35:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/conn_db.jsp", Long.valueOf(1679768856139L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');


String drivers="oracle.jdbc.driver.OracleDriver";
String url="jdbc:oracle:thin:@localhost:1521:xe";
String db_user="jsp";
String db_passwd="root";

try {
Class.forName(drivers); // ëë¼ì´ë²ë¥¼ ì°¾ìµëë¤.
} catch (ClassNotFoundException e) {
out.println(e.getMessage());
}

Connection conn=null; // DB ì°ê²° ì ë³´ë¥¼ ë´ì conn ì ì¸
Statement stmt=null; // Statementí stmt ì ì¸(ì¼ì¢ì DB 'ì°ê²° íµë¡' ì­í ì í¨)
ResultSet rs=null; // ResultSetí rs ì ì¸. ì¿¼ë¦¬ë¬¸ ì¤í ê²°ê³¼ ê°ì ë´ì ê°ì²´

try {
conn = DriverManager.getConnection(url, db_user, db_passwd);
// DB ì°ê²°. connì ì°ê²° ì ë³´ ì ì¥
stmt = conn.createStatement(); // ì°ê²° ì ë³´(conn)ë¥¼ ê°ì§ê³  ì°ê²° íµë¡(stmt) ìì±
} catch (Exception e) {
e.printStackTrace();
}

/* ì ëª¨ë  ë¬¸ì¥ì ìì¸ ì²ë¦¬ ìì´ ìëì ê°ì´ íìí´ë ê°ë¥í¨.
Class.forName("oracle.jdbc.driver.OracleDriver");
Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "jsp", "root");
Statement stmt = conn.createStatement();
*/


      out.write("\r\n");
      out.write("\r\n");


String s_mail_addr; // 메일 주소가 있을 경우 작성자 이름에 메일 주소를 링크할 때 사용
String s_subject, s_name, s_email, s_sql;
int i_number, i_count;

int i_cur_num=0, i_total_no=0, i_total_page=0; // 가상 글 번호
int i_page_num = 10; // 한 화면에 보여줄 페이지 링크 갯수 -> 블록
int i_list_num = 10 ; // 한 페이지에 보여줄 게시물의 수
int i_total_block, i_block;
int i_first, i_last, i_block_prev, i_block_next, i_page_link;
int i_page, i_prev, i_next;
String s_page, s_writetime ;

s_page = request.getParameter("page"); // list.jsp?page=3 과 같이 넘어온 값 "3"을 넘겨받음.
if(s_page==null) s_page="1"; // 그냥 list.jsp로 했을 경우
i_page = Integer.parseInt(s_page);

int i_offset = i_list_num*(i_page-1); //한 페이지의 시작 글 번호(i_listnum 수만큼 나누었을 때 시작하는 글의 번호)


      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=content-type content=text/html; charset=euc-kr>\r\n");
      out.write("<title>JSP 게시판 - 글목록보기</title>\r\n");
      out.write("<STYLE TYPE=text/css>\r\n");
      out.write("BODY,TD,SELECT,input,DIV,form,TEXTAREA,center,option,pre,i_blockquote {font-family:굴림;font-size:9pt;color:#555555;}\r\n");
      out.write("A:link    {color:black;text-decoration:none;}\r\n");
      out.write("A:visited {color:black;text-decoration:none;}\r\n");
      out.write("A:active  {color:black;text-decoration:none;}\r\n");
      out.write("A:hover   {color:gray; text-decoration:none;}\r\n");
      out.write("</STYLE>\r\n");
      out.write("</head>\r\n");
      out.write("<body background=./images/body_bg.gif>\r\n");
      out.write("<img src=./images/maintitle.gif>\r\n");
      out.write("<table border=1 cellspacing=0 width=680 bordercolordark=white bordercolorlight=#999999>\r\n");
      out.write("    <tr>\r\n");
      out.write("        <td width=30 bgcolor=#CCCCCC>\r\n");
      out.write("            <p align=center>no</p>\r\n");
      out.write("        </td>\r\n");
      out.write("        <td bgcolor=#CCCCCC width=490>\r\n");
      out.write("            <p align=center>subject</p>\r\n");
      out.write("        </td>\r\n");
      out.write("        <td width=60 bgcolor=#CCCCCC>\r\n");
      out.write("            <p align=center>name</p>\r\n");
      out.write("        </td>\r\n");
      out.write("        <td width=70 bgcolor=#CCCCCC>\r\n");
      out.write("            <p align=center>date</p>\r\n");
      out.write("        </td>\r\n");
      out.write("        <td width=30 bgcolor=#CCCCCC>\r\n");
      out.write("            <p align=center>hit</p>\r\n");
      out.write("        </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("\r\n");


try {

        rs=stmt.executeQuery("select count(board_number) from bbs");
        if(rs.next()) {
                i_total_no=rs.getInt(1);  //총 글수
        }

        if(i_total_no%i_list_num==0) { // 전체 글 수를 페이지당 글 수로 나눈 값의 올림 값 = 전체 페이지 수를 구합니다.
                i_total_page = i_total_no/i_list_num;
        } else {
                i_total_page = (i_total_no/i_list_num)+1; // 올림 수 구하기
        }

        i_cur_num = i_total_no - i_list_num*(i_page-1); // 현재 글의 가상 번호(실제 테이블의 board_number 값과는 다릅니다.)

        s_sql = "select board_number,subject,name,WRIETIME,count,email from bbs order by board_number desc limit "+i_offset+","+i_list_num;  
        // 목록 조회를 위한 SQL 문

        rs = stmt.executeQuery(s_sql); // 쿼리문 실행 결과 값을 담을 객체

        while(rs.next()) {
                i_number = rs.getInt(1);
                s_subject = rs.getString(2);
                s_name = rs.getString(3);
                s_writetime = rs.getString(4);
                i_count = rs.getInt(5);
                s_email = rs.getString(6);

                if(!s_email.equals("")) {
                        s_mail_addr="<a href=mailto:"+s_email+">"+s_name+"</a>";
                } else {
                        s_mail_addr=s_name;
                }


      out.write("\r\n");
      out.write("\r\n");
      out.write("    <tr>\r\n");
      out.write("        <td width=30>\r\n");
      out.write("            <p align=center>");
      out.print(i_cur_num );
      out.write("</p>\r\n");
      out.write("        </td>\r\n");
      out.write("        <td width=490>\r\n");
      out.write("            <a href=\"view.jsp?page=");
      out.print( i_page );
      out.write("&board_number=");
      out.print( i_number );
      out.write('"');
      out.write('>');
      out.print(s_subject );
      out.write("</a>\r\n");
      out.write("        </td>\r\n");
      out.write("        <td width=60>\r\n");
      out.write("            <p align=center>");
      out.print(s_mail_addr );
      out.write("</p>\r\n");
      out.write("        </td>\r\n");
      out.write("        <td width=70>\r\n");
      out.write("            <p align=center>");
      out.print(s_writetime );
      out.write("</p>\r\n");
      out.write("        </td>\r\n");
      out.write("        <td width=30>\r\n");
      out.write("            <p align=center>");
      out.print(i_count );
      out.write("</p>\r\n");
      out.write("        </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("\r\n");


                i_cur_num --;

        } //while문 닫음

        stmt.close(); // 인클루드 파일(db_conn.jsp)에서 생성한 stmt 닫기
        conn.close(); // 인클루드 파일(db_conn.jsp)에서 생성한 Conn 닫기

} catch (Exception e) {
                out.println(e);
}


      out.write("\r\n");
      out.write("\r\n");
      out.write("    <tr>\r\n");
      out.write("        <td width=100% colspan=5>\r\n");
      out.write("\r\n");
      out.write("\r\n");

/*************************************
*페이지 링크
**************************************/

if (i_total_page%i_page_num==0) { // 전체 블록의 수 : 전체 페이지 수를 한 화면에 보이는 페이지 수로 나눔
        i_total_block = i_total_page/i_page_num;
} else {
        i_total_block = (i_total_page/i_page_num)+1;
}

if (i_page%i_page_num==0) {
        i_block = i_page/i_page_num; // 현재 블록의 번호 :
}
        else {
        i_block = (i_page/i_page_num)+1;
}

i_first = (i_block-1)*i_page_num; // 현재 블록이 시작하는 첫 페이지
i_last = i_block*i_page_num; // 현재 블록의 끝 페이지

if(i_block >= i_total_block) {
        i_last = i_total_page;
}

out.println("<p align=center>");

if(i_block >1) {
        i_block_prev = i_first -1;
        out.println("<a href='list.jsp?page=1'>[처음]</a> ");
        out.println("<a href='list.jsp?page="+i_block_prev+"'>["+i_page_num+"개 앞]</a>");
}

if(i_page>1) {
        i_prev = i_page-1;
        out.println("<a href='list.jsp?page="+i_prev+"'>[이전]</a>         ");
}

for (i_page_link=i_first+1;i_page_link<=i_last;i_page_link++) {
        if(i_page_link==i_page) {
                out.println("<font color=green><b>"+i_page_link+"</b></font>");
        } else {
                out.println("<a href='list.jsp?page="+i_page_link+"'>["+i_page_link+"]</a>");
        }
}

if (i_total_page > i_page) {
        i_next = i_page+1;
        out.println(" <a href='list.jsp?page="+i_next+"'>[다음]</a>");
}

if (i_block < i_total_block) {
        i_block_next = i_last + 1;
        out.println("<a href='list.jsp?page="+i_block_next+"'>["+i_page_num+"개 뒤]</a> ");
        out.println("<a href='list.jsp?page="+i_total_page+"'>[마지막]</a> ");
}



      out.write("\r\n");
      out.write("        </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("        <td width=100% colspan=5>\r\n");
      out.write("            <p align=center><a href='write.html'>[글쓰기]</a></p>\r\n");
      out.write("        </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("</table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
